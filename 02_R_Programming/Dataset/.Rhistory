points(3,pca_value,col="green", pch=15)
legend(12, 35, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(12, 10000, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), lty=1:2, cex=0.8)
legend(12, 10000, legend=c("Line 1", "Line 2"),
col=c("red", "blue"), ,pch=15)
legend(12, 10000, legend=c("Actual", "KNN","SVD"),
col=c("blue", "red","green"), ,pch=15)
plot(seq(1:19), dat_1, xlab='',ylab='Expression',main='206054_at Probeset profile plot\nComparison ',
col='blue', pch=15, xaxt="n")
lines(dat_1, y = NULL, type = "l", lwd=2)
axis(1, at=1:19, labels=colnames(dat_1), las = 2, cex.axis = 0.8)
points(3,knn_value,col="red", pch=15)
points(3,pca_value,col="green", pch=15)
legend(12, 10000, legend=c("Actual", "KNN","SVD"),
col=c("blue", "red","green") ,pch=15)
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/plot_pred_Renal.png')
dat <- t(reorder_dat)			#transpose dat
dat.dist <- dist(dat,method="euclidean")	# calculate distance
dat.clust <- hclust(dat.dist,method="single")	# calculate clusters
plot(dat.clust,main= "Clustered Dendrogram of Renal Cell Carcinoma",labels=names(dat),cex=0.75)	# plot cluster tree
dat <- t(reorder_dat)			#transpose dat
dat.dist <- dist(dat,method="euclidean")	# calculate distance
dat.clust <- hclust(dat.dist,method="single")	# calculate clusters
plot(dat.clust,main= "Clustered Dendrogram of Renal Cell Carcinoma",labels=names(dat),cex=0.75)	# plot cluster tree
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/culster_Renal.png')
dev.off()
dat <- t(reorder_dat)			#transpose dat
dat.dist <- dist(dat,method="euclidean")	# calculate distance
dat.clust <- hclust(dat.dist,method="single")	# calculate clusters
plot(dat.clust,main= "Clustered Dendrogram of Renal Cell Carcinoma",labels=names(dat),cex=0.75)	# plot cluster tree
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/culster_Renal.png')
dev.off()
dat <- reorder_dat
dat.mean <- apply(log2(dat),2,mean)		# calculate mean for each sample
dat.sd <- sqrt(apply(log2(dat),2,var))		# calculate st.deviation for each sample
dat.cv <- dat.sd/dat.mean			#calculate cv
dat <- t(reorder_dat)			#transpose dat
dat.dist <- dist(dat,method="euclidean")	# calculate distance
dat.clust <- hclust(dat.dist,method="single")	# calculate clusters
plot(dat.clust,main= "Clustered Dendrogram of Renal Cell Carcinoma",labels=names(dat),cex=0.75)	# plot cluster tree
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/culster_Renal.png')
dev.off()
plot(seq(1:19), dat_2, xlab='',ylab='Expression',main='217512_at Probeset profile plot',
col='blue', pch=15, xaxt="n")
lines(dat_2, y = NULL, type = "l", lwd=2)
axis(1, at=1:19, labels=colnames(dat_2), las = 2, cex.axis = 0.8)
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/plot2_Renal.png')
dev.off()
plot(seq(1:19), dat_3, xlab='',ylab='Expression',main='206672_at Probeset profile plot',
col='blue', pch=15, xaxt="n")
lines(dat_3, y = NULL, type = "l", lwd=2)
axis(1, at=1:19, labels=colnames(dat_3), las = 2, cex.axis = 0.8)
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/plot3_Renal.png')
dev.off()
print(knn_value)
print(relative_error)
print(pca_value)
plot(seq(1:19), dat_1, xlab='',ylab='Expression',main='206054_at Probeset profile plot\nComparison ',
col='blue', pch=15, xaxt="n")
lines(dat_1, y = NULL, type = "l", lwd=2)
axis(1, at=1:19, labels=colnames(dat_1), las = 2, cex.axis = 0.8)
points(3,knn_value,col="red", pch=15)
points(3,pca_value,col="green", pch=15)
legend(12, 10000, legend=c("Actual", "KNN","SVD"),
col=c("blue", "red","green") ,pch=15)
dev.copy(png,'C:/Users/Jack/Desktop/R_Lab/Lab_4/plot_pred_Renal.png')
dev.off()
library(marray);
install.packages(marray)
source("https://bioconductor.org/biocLite.R")
biocLite("marray")
library(marray);
biocLite("swirl")
library(marray);
library(marray)
library(swirl)
swirl()
library(marray)
data(swirl)
data(swirl)
plot(swirl, slide=2,pch=".",cex.lab=0.7)
par(mfrow=c(2,2),oma=c(0.1,3,0.1,3))
plot(swirl, slide=3,pch=".",cex.lab=0.7)
library(marray)
data(swirl)
plot(swirl, slide=3,pch=".",cex.lab=0.7)
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE)
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE,mode="scatter")
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE,mode="scatter")
plot(swirl, slide=3,pch=".",cex.lab=2,legend=FALSE,mode="scatter")
plot(swirl)
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE,lines(NULL))
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE,lines(NULL))
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE,lines(type="n"))
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE)
lowessCurve(swirl,slide=2,lwd=2,col='black')
ma <- getSignal(swirl, bgSubtract=TRUE)
bioconductor("SVM2CRM")
biocLite("SVM2CRM")
ma <- getSignal(swirl, bgSubtract=TRUE)
library(SVM2CRM)
ma <- getSignal(swirl, bgSubtract=TRUE)
ma <- getSignal(swirl)
lowessCurve(swirl,slide=2,lwd=2,col='black')
biocLite("Lowess")
library(lowess)
biocLite("Loess")
biocLite("Lowess")
biocLite("sma")
source("http://www.braju.com/R/hbLite.R")
hbGet("aroma")
lowessCurve(swirl,slide=2,lwd=2,col='black')
source("https://bioconductor.org/biocLite.R")
biocLite("aroma.light")
library(aroma.light)
lowessCurve(swirl,slide=2,lwd=2,col='black')
library(sma)
library(limma)
biocLite("sma")
biocLite("limma")
library(limma)
library(aroma.light)
lowessCurve(swirl,slide=2,lwd=2,col='black')
biocLite("loess")
biocLite("lowess")
lowess(swirl,slide=2,lwd=2,col='black')
library(marray)
data(swirl)
ma <- getSignal(swirl, bgSubtract=TRUE)
plot(swirl, slide=3,pch=".",cex.lab=0.7,legend=FALSE)
normalizeWithinSlide(swirl, "m")
raw <- RawData(swirl, layout=layout)
maPlot(swirl[,3],lines.func=NULL,legend.func=NULL,main=’MvA Plot of Swirl Array 3’)
library(marray)
library(aroma.light)
data(swirl)
maPlot(swirl[,3],lines.func=NULL,legend.func=NULL,main=’MvA Plot of Swirl Array 3’)
maPlot(swirl[,3],lines.func=NULL,legend.func=NULL,main="MvA Plot of Swirl Array 3")
x <- c(4, "a", TRUE)
print(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)?
install.packages("KernSmooth")
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
x <- 1:4
y <- 2:3
x+y
class(x+y)
z <- x+y
class(z)
x <- 1:4
y <- 2
z <- x+y
class(z)
z
x <- 1:4
y <- 2:3
z <- x+y
class(z)
z
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x
x[x < 6] = 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x
x[x %in% 1:5] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x
x[x %in% 1:5] <- 0
x
x <- c(3, 5, 1, 10, 12, 6)
x[x == 0] < 6
x
x[x <= 5] <- 0
x
x[x < 6] <- 0
x
class(x <- 4L)
x <- 4L
class(x)
class(x <- c(4, "a", TRUE))
setwd("C:\git\DataScience\02_R_Programming\")
setwd("C:\git\DataScience\02_R_Programming")
setwd("C:/git/DataScience/02_R_Programming")
dat <- read.table(".Dataset/lung_cancer.txt",header=T,row.names=1,sep="\t")
dat <- read.table("/Dataset/lung_cancer.txt",header=T,row.names=1,sep="\t")
dat <- read.table("./Dataset/lung_cancer.txt",header=T,row.names=1,sep="\t")
setwd("C:/git/DataScience/02_R_Programming")
dat <- read.table("./Dataset/lung_cancer.txt",header=T,row.names=1,sep="\t")
dat <- read.table("./Dataset/hw1_data.csv",header=T,row.names=1,sep="\t")
colnames(dat)
dat <- read.table("./Dataset/hw1_data.csv",header=T,row.names=1,sep="\t")
colnames(dat)
dat <- read.table("./Dataset/hw1_data.csv",header=T,row.names=1,sep=",")
dat <- read.table("./Dataset/hw1_data.csv",header=T,row.names=0,sep=",")
dat <- read.table("./Dataset/hw1_data.csv",header=T,sep=",")
colnames(dat)
head(dat)
head(dat,2)
nrows(dat)
nrow(dat)
tail(dat,2)
dat[47]
dat[,147]
dat[1,47]
dat[47,1]
sum(is.na(dat[,1]))
mean(dat[,1])
mean(dat[,1],na.rm = TRUE)
subset_dat <- dat[which(dat$Ozone>31 & dat$Wind>90)]
subset_dat <- dat[which(dat$Ozone>31 & dat$Wind>90)]
mean(subset_dat$Solar.R)
mean(subset_dat$Solar.R,na.rm = TRUE)
print(subset_dat)
subset_dat <- dat[which(dat$Ozone>31 & dat$Wind>90,)]
print(subset_dat)
subset_dat <- dat[which(dat$Ozone>31 & dat$Wind>90),]
print(subset_dat)
subset_dat <- dat[which(dat$Ozone>31),]
print(subset_dat)
subset_dat <- dat[which(dat$Ozone>31 & dat$Temp>90),]
print(subset_dat)
mean(subset_dat$Solar.R,na.rm = TRUE)
dat$Ozone[47]
mean(dat[which(dat$Month=6),])
mean(dat[which(dat$Month==6),])
mean(dat[which(dat$Month=6),])
mean(dat[which(dat$Month==6),])
mean(dat[which(dat$Month==6),],na.rm = TRUE)
mean(dat[which(dat$Month>6),],na.rm = TRUE)
mean(dat[which(dat$Month>6),])
TEST <- dat[which(dat$Month>6),]
print(TEST)
TEST <- dat[which(dat$Month==6),]
print(TEST)
mean(dat[which(dat$Month==6),]$Temp)
max(dat[which(dat$Month==5),]$Ozone,na.rm = TRUE)
rbind(x, y)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
z <- rbind(x, y)
class(z)
class(x <- 4L)
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- list(2, "a", "b", TRUE)
x[[1]]
x <- c(1,3, 5)
y <- c(3, 2, 10)
z <- rbind(x, y)
class(z)
print(z)
x <- 1:4
y <- 2:3
z <- x+y
class(z)
z
x <- c(1,3, 5)
y <- c(3, 2, 10)
z <- cbind(x, y)
print(z)
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y <- 2
z <- x+y
class(z)
z
class(x <- 4L)
cube <- function(x, n) {
x^3
}
cube(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
z
y <- if(x < 3) {
NA
} else {
10
}
y
if (pollutant == "sulfate"){
colnum <- 2
} else if (pollutant == "nitrate") {
colnum <- 3
} else {
break
}
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
if (pollutant == "sulfate"){
colnum <- 2
} else if (pollutant == "nitrate") {
colnum <- 3
} else {
break
}
output <- numeric()
for (i in id){
end <- sprintf("/%03d",i)
fpath <- paste(directory,end,".csv", sep = "")
x <- read.csv(fpath)
x <- x[,colnum]
good <- complete.cases(x)
output <- append(output,x[good])
}
mean(output)
}
pollutantmean("specdata","nitrate",115:190)
cd Assignment1
swd("C:\git\DataScience\02_R_Programming\Programming_Assignment\Assignment1")
swd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
pollutantmean("specdata","nitrate",115:190)
pollutantmean("specdata","nitrate",115:190)
pollutantmean("specdata", "sulfate", 1:10)
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases
output <- matrix(nrow = 0, ncol=2)
for (i in id){
end <- sprintf("/%03d",i)
fpath <- paste(directory,end,".csv", sep = "")
data <- read.csv(fpath)
data <- data[,2:3]
good <- complete.cases(data)
output <- rbind.data.frame(output,c(i,sum(good, na.rm=TRUE)))
}
colnames(output) <- c("id","nobs")
output
}
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
begin <- paste(directory, "/",sep = "")
fnames <- dir(begin, pattern = ".csv")
output <- numeric()
for (i in 1:length(fnames)){
data <- read.csv(paste(begin, fnames[i], sep = ""))
data <- data[,2:3]
good <- complete.cases(data)
if (sum(good, na.rm=TRUE) > threshold) {
data = data[good,]
output = append(output, cor(data[,1], data[,2]))
}
}
output
}
setwd("C:/git/DataScience/02_R_Programming/Programming_Assignment/Assignment1")
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
setwd("C:/git/DataScience/02_R_Programming/specdata")
setwd("C:/git/DataScience/02_R_Programming")
setwd("C:/git/DataScience/02_R_Programming/Dataset")
pollutantmean("specdata", "sulfate", 1:10)
library(datasets)
data(iris)
?iris
mean(iris[where(iris$Species=="virginica"),]$Sepal.Length)
mean(iris[which(iris$Species=="virginica"),]$Sepal.Length)
round(mean(iris[which(iris$Species=="virginica"),]$Sepal.Length),1)
round(mean(iris[which(iris$Species=="virginica"),]$Sepal.Length),0)
print(apply(iris, 2, mean))
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
colMeans(iris)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
x <- with(mtcars, tapply(mpg, cyl, mean))
x$8
library(datasets)
print(x)
print(x[3])
abs(x[3]-x[1])
x <- with(mtcars, tapply(hp, cyl, mean))
abs(x[3]-x[1])
print(x[[4]])
print(x[4])
class(x)
x <- with(mtcars, tapply(hp, cyl, mean))
round(abs(x[3]-x[1]),0)
debug(ls)
ls
test<-makeMatrix()
makeMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y){
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
m <- x$getsolve()
if(!is.null(m)) {
message("getting cached data")
# Returns the cached matrix of 'x'
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
test<-makeMatrix()
test$set(matrix(-2:1,2,2))
cacheSolve(test)
cacheSolve(test) %*% matrix(-2:1,2,2)
getting cached data
cacheSolve(test)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
